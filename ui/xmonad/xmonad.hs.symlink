-------------------- imports --------------------

--necessary
import XMonad
import qualified XMonad.StackSet as W
import qualified Data.Map as M
import System.Exit
import System.IO (Handle, hPutStrLn)

--utilities
import XMonad.Util.Run (spawnPipe, safeSpawn, safeSpawnProg)
import XMonad.Actions.NoBorders
import XMonad.Actions.CycleWS

--hooks
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.UrgencyHook
-- fullscreen for firefox
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageHelpers

--MO' HOOKS
import Foreign.C.Types (CLong)

--layouts
import XMonad.Layout.Master
import XMonad.Layout.NoBorders
import XMonad.Layout.ResizableTile
import XMonad.Layout.Named
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Spacing
import XMonad.Layout.Spiral
import XMonad.Layout.Tabbed
import XMonad.Layout.IM
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Reflect
import XMonad.Layout.IndependentScreens
import Data.Ratio((%))

-- Various
import Graphics.X11.ExtraTypes.XF86
import XMonad.Hooks.EwmhDesktops

-------------------- main --------------------

main = do
  nScreens   <- countScreens
  t          <- mapM (spawnPipe . xmobarCommandTop) [0 .. nScreens-1]
  xmonad $ withUrgencyHook dzenUrgencyHook {
    args                  = ["-fn", "xft:Sauce Code Powerline:pixelsize=12", "-bg", "#DC6268", "-fg", "#212121", "-xs", "1"]
  } $ ewmh defaultConfig {
    workspaces            = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10","11","12","13"],
    modMask               = mod4Mask,
    borderWidth           = 1,
    normalBorderColor     = "#1D254D",
    focusedBorderColor    = "#562460",
    terminal              = "urxvtc",
    manageHook            = manageHook',
    layoutHook            = layoutHook',
    handleEventHook       = handleEventHook defaultConfig <+> docksEventHook,
    logHook               = mapM_ dynamicLogWithPP $ zipWith myXmobarPP t [0..nScreens],
    startupHook           = startupHook',
    keys                  = keys'
}

-------------------- loghooks --------------------

xmobarCommandTop (S screenNumber) = unwords ["xmobar", "-x", show screenNumber, "~/.xmonad/xmobarrc_top"]

myXmobarPP h screenNumber = xmobarPP {
    ppCurrent = xmobarColor "#9A80B6" "" . wrap "[" "]"
  , ppVisible = xmobarColor "#81A2BE" "" . wrap "(" ")"
  , ppTitle = shorten 256
  , ppSep = " // "
  , ppWsSep = "\" "
  , ppHiddenNoWindows = xmobarColor "#A0A0A0" ""
  , ppOutput = hPutStrLn h
  , ppLayout  = xmobarColor "#B5BD68" "" . ppLayoutName
} where ppLayoutName x = case x of
                         "Tall"               -> "·:"
                         "ThreeCol"           -> "·::"
                         "Full"               -> "·"
                         "Grid"               -> "::"
                         "Spacing"            -> "·:"
                         "Spacing 1 Tall"     -> "·:"
                         "Spacing 1 ThreeCol" -> "·::"
                         "Spacing 1 Full"     -> "·"
                         "Spacing 1 Grid"     -> "::"
                         "SimplestFloat"      -> "*"
                         "Tiled"              -> "·:"
                         "Tabbed Simplest"    -> "_"
                         "Mastered Tabbed Simplest"    -> "·_"
                         "Spiral"             -> "@"
                         "Mirror Tiled"       -> "-"
                         "Spacing Home"       -> "$"
                         _                    -> x


-------------------- layouthooks --------------------

layoutHook' = customLayout
customLayout = avoidStrutsOn[U, D]
             $ onWorkspace "1" spacedHome
             $ onWorkspace "2" myWww
             $ onWorkspace "5" myAudioScreen
             $ onWorkspace "4" myMovieTheater
             $ myOthers

  where
    spacedHome = named "Spacing Home" $ spacing 4 $ Tall 1 (3/100) (56/100)
    spaced = named "Spacing" $ spacing 4 $ Tall 1 (3/100) (1/2)
    tiled  = named "Tiled" $ ResizableTall 1 (2/100) (1/2) []
    myAudioScreen = noBorders spaced
    myMovieTheater = smartBorders tiled
    myOthers = spaced ||| smartBorders tiled ||| smartBorders (Mirror tiled) ||| noBorders Full ||| noBorders (myTabbed) ||| ((mastered 0.05 0.5) $ noBorders (myTabbed)) ||| spiral (6/7)
    myWww = noBorders Full ||| spaced ||| smartBorders tiled ||| smartBorders (Mirror tiled) ||| noBorders (myTabbed) ||| ((mastered 0.05 0.5) $ noBorders (myTabbed)) ||| spiral (6/7)
    myTabbed = tabbed shrinkText defaultTheme {
      fontName = "xft:Sauce Code Powerline:size=12",
      activeColor = "#4D4D4D",
      activeTextColor = "#CD5C5C",
      decoHeight = 20
  }


-------------------- menuhook --------------------

getProp :: Atom -> Window -> X (Maybe [CLong])
getProp a w = withDisplay $ \dpy -> io $ getWindowProperty32 dpy a w

checkAtom name value = ask >>= \w -> liftX $ do
                a <- getAtom name
                val <- getAtom value
                mbr <- getProp a w
                case mbr of
                  Just [r] -> return $ elem (fromIntegral r) [val]
                  _ -> return False

checkDialog = checkAtom "_NET_WM_WINDOW_TYPE" "_NET_WM_WINDOW_TYPE_DIALOG"
checkMenu = checkAtom "_NET_WM_WINDOW_TYPE" "_NET_WM_WINDOW_TYPE_MENU"

manageMenus = checkMenu --> doFloat
manageDialogs = checkDialog --> doFloat

-------------------- managehook --------------------

manageHook' :: ManageHook
manageHook' = manageHook defaultConfig <+> manageDocks <+> manageMenus <+> manageDialogs <+> myManageHook

myManageHook :: ManageHook
myManageHook = composeAll . concat $
  [ [className =? ccf      --> doFloat | ccf <- myFloats]
  , [title =? t            --> doCenterFloat | t <- myOtherFloats]
  , [className =? r        --> doIgnore | r <- myIgnores]
  , [className =? c        --> doF (W.shift "2") | c <- browsers]
  , [className =? c        --> doF (W.shift "3") | c <- navigation]
  , [className =? c        --> doF (W.shift "4") | c <- videos]
  , [className =? c        --> doF (W.shift "5") | c <- music]
  , [className =? c        --> doF (W.shift "11") | c <- confmanagement]
  , [className =? c        --> doF (W.shift "13") | c <- mail]
  , [maybeToDefinite (isFullscreen -?> doFullFloat)]
  ]

  where
    myOtherFloats = ["Add-ons", "Downloads", "Firefox Preferences", "Save As...", "Send file", "Open", "File Transfers"]
    myIgnores = ["trayer", "stalonetray"]
    myFloats = ["vdpau", "mpv"]
    browsers = ["firefox", "Chromium"]
    confmanagement = ["Evince"]
    videos = ["vdpau", "MPlayer", "Vlc", "Smplayer", "mpv"]
    navigation = ["Nautilus", "Spacefm","Nemo"]
    music = []
    mail = ["Thunderbird"]

startupHook' = startup

startup :: X ()
startup = do
            spawn "xmobar -x 0 ~/.xmonad/xmobarrc_bottom"
            spawn "xmobar -x 1 ~/.xmonad/xmobarrc_bottom"

-------------------- keybinds --------------------

keys' :: XConfig Layout -> M.Map (KeyMask, KeySym) (X ())
keys' conf@(XConfig {XMonad.modMask = modMask}) = M.fromList $

  --launching/killing
  [ ((modMask,               xK_Return  ), spawn $ XMonad.terminal conf)
  , ((modMask,               xK_x       ), kill)
  , ((modMask,               xK_r       ), safeSpawn "dmenu_run" ["-f", "-fn", "Sauce Code Powerline-9", "-nb", "#131313", "-nf", "#888888", "-sb", "#2A2A2A", "-sf", "#62ACB2"])

  --layouts
  , ((modMask,               xK_space   ), sendMessage NextLayout)
  , ((modMask .|. shiftMask, xK_space   ), setLayout $ XMonad.layoutHook conf)
  , ((modMask,               xK_b       ), sendMessage ToggleStruts)
  -- Focus window with urgency hook
  , ((modMask               , xK_y      ), focusUrgent )

  -- refresh
  , ((modMask,               xK_n       ), refresh)
  , ((modMask .|. shiftMask, xK_w       ), withFocused toggleBorder)

  -- floating
  , ((modMask,               xK_t       ), withFocused $ windows . W.sink)

  -- focus
  , ((modMask,               xK_Tab     ), windows W.focusDown)
  , ((modMask,               xK_j       ), windows W.focusDown)
  , ((modMask,               xK_k       ), windows W.focusUp)
  , ((modMask,               xK_m       ), windows W.focusMaster)

  -- swapping
  , ((modMask .|. shiftMask, xK_j       ), windows W.swapDown  )
  , ((modMask .|. shiftMask, xK_k       ), windows W.swapUp    )

  -- increase or decrease number of windows in the master area
  , ((modMask .|. controlMask, xK_h     ), sendMessage (IncMasterN 1))
  , ((modMask .|. controlMask, xK_l     ), sendMessage (IncMasterN (-1)))

  -- resizing
  , ((modMask,               xK_h       ), sendMessage Shrink)
  , ((modMask,               xK_l       ), sendMessage Expand)
  , ((modMask .|. shiftMask, xK_h       ), sendMessage MirrorShrink)
  , ((modMask .|. shiftMask, xK_l       ), sendMessage MirrorExpand)

  -- quit, or restart
  , ((modMask .|. shiftMask, xK_q       ), io (exitWith ExitSuccess))
  , ((modMask              , xK_q       ), spawn "killall xmobar; xmonad --recompile; xmonad --restart")]
  ++
  -- mod-[1..9] %! Switch to workspace N
  -- mod-shift-[1..9] %! Move client to workspace N
  [((m .|. modMask, k), windows $ f i)
      | (i, k) <- zip (XMonad.workspaces conf) [0x26, 0xe9, 0x22, 0x27, 0x28, 0x2d, 0xff1b, 0x5f, 0xe7, 0xe0, 0x29, 0x3d, 0xff08]
      , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]

  ++
  [((m .|. modMask, k), windows $ f i)
      | (i, k) <- zip (XMonad.workspaces conf) [0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x2d, 0x3d, 0xff08]
      , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
  ++
  -- mod-{F1,F2,F3}, Switch to physical/Xinerama screens 1, 2, or 3
  -- mod-shift-{F1,F2,F3}, Move client to screen 1, 2, or 3
  [((m .|. modMask, key), screenWorkspace sc >>= flip whenJust (windows . f))
    | (key, sc) <- zip [0xffbe, 0xffbf, 0xffc0] [0..]
      , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]

  ++
  -- switch beetwenn layout
  [ ((modMask,               xK_Right   ), nextWS)
  , ((modMask,               0xb2       ), nextWS)
  , ((modMask,               0x60       ), nextWS)
  , ((modMask,               xK_Left    ), prevWS)
  ]
  -- xev for the key code
  ++
  [ ((0,   xF86XK_AudioNext             ), safeSpawn "mpc" ["next"])
  , ((0,   xF86XK_AudioPrev             ), safeSpawn "mpc" ["prev"])
  , ((0,   xF86XK_AudioMedia            ), safeSpawn "mpc" ["pause"])
  , ((0,   xF86XK_AudioStop             ), safeSpawn "mpc" ["pause"])
  , ((0,   xF86XK_Tools                 ), safeSpawn "mpc" ["pause"])
  , ((0,   0xff13                       ), safeSpawn "mpc" ["pause"])
  , ((0,   xF86XK_AudioPlay             ), safeSpawn "mpc" ["toggle"])
  , ((0,   xF86XK_AudioLowerVolume      ), spawn "amixer -c 0 set Master 1dB- unmute > /dev/null")
  , ((0,   xF86XK_AudioRaiseVolume      ), spawn "amixer -c 0 set Master 1dB+ unmute > /dev/null")
  , ((0,   xF86XK_AudioMute             ), safeSpawn "amixer" ["-c", "0", "set", "Master", "toggle"])
  , ((0,   xF86XK_Calculator            ), spawn "amixer -c 0 set Master 95% unmute > /dev/null")
  ]
  ++
  -- lock
  [ ((modMask,               0xffc5     ), safeSpawn "xscreensaver-command" ["--lock"])
  , ((0,   0xff14                       ), safeSpawn "xscreensaver-command" ["--lock"])
  ]
  ++
  -- program control
  [ ((0,   xF86XK_MonBrightnessUp       ), safeSpawn "xbacklight" ["-inc", "10", "-time", "1", "-steps", "1"])
  , ((0,   xF86XK_MonBrightnessDown     ), safeSpawn "xbacklight" ["-dec", "10", "-time", "1", "-steps", "1"])
  ]

